}
calculateBaroPress <- function(startDateTime, endDateTime) {
dateTimeInterval <- interval(ymd_hms(startDateTime),
ymd_hms(endDateTime))
(baroPress <- getBaromPressures(dateTimeInterval))
startDateTime <- "2014-01-02 12:03:34"
print(paste("Number of rows imported: ", nrow(LPO_weather_data)))
# remarks -----------------------------------------------------------------
# Copyright Mark Niemann-Ross, 2018
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# LinkedIn: https://www.linkedin.com/in/markniemannross/
# Github: https://github.com/mnr
# More Learning: http://niemannross.com/link/mnratlil
# Description: Code Clinic R: Solution 1. Weather
# setup and libraries -----------------------------------------------------
a<-2
a
library(magrittr)
library(lubridate)
# Introduction
# This Code Clinic problem is about calculating statistics from a data set.
# It's easy stuff, but presents a good example of how different languages
# accomplish common tasks.
# Import the source data --------------------------------------------------
# The data set is weather data captured from Lake Pend O'Reille
# in Northern Idaho. We have almost 20 megabytes of data from the
# years 2012 thorugh 2015. That data is available in the folder with
# other exercise files. Each observation in the data includes several
# variables and the data is straightforward.
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
# confirm the results of the import
head(LPO_weather_data, n = 3)
subset(LPO_weather_data, date> "2014-01-02" & date < "2014-01-04")
filtered<-subset(LPO_weather_data, date> "2014-01-02" & date < "2014-01-04")
View(filtered)
LPO_weather_data$date <- as.Date(LPO_weather_data$date, format= "%Y-%m-%d")
filtered<-subset(LPO_weather_data, date> "2014-01-02" & date < "2014-01-04")
filtered
LPO_weather_data$date <- as.Date(LPO_weather_data$date, format= "%Y-%m-%d")
LPO_weather_data$date
# Calculate the Coefficient of Barometric Pressure --------------------------------------------
# The problem is simple: Write a function that accepts ...
# a beginning date and time
# ...and...
# an ending date and time...
LPO_weather_data$date
View(LPO_weather_data)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
View(mytempfile)
LPO_weather_data$date <- as.Date(LPO_weather_data$date, format= "%Y-%m-%d")
LPO_weather_data$date
library(magrittr)
library(lubridate)
# Introduction
# This Code Clinic problem is about calculating statistics from a data set.
# It's easy stuff, but presents a good example of how different languages
# accomplish common tasks.
# Import the source data --------------------------------------------------
# The data set is weather data captured from Lake Pend O'Reille
# in Northern Idaho. We have almost 20 megabytes of data from the
# years 2012 thorugh 2015. That data is available in the folder with
# other exercise files. Each observation in the data includes several
# variables and the data is straightforward.
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
# confirm the results of the import
head(LPO_weather_data, n = 3)
tail(LPO_weather_data, n = 3)
print(paste("Number of rows imported: ", nrow(LPO_weather_data)))
View(mytempfile)
install.packages("party")
pacman :: p_load(pacman, party, psych, rio, tidyverse)
print(paste("Number of rows imported: ", nrow(LPO_weather_data)))
t<-mutate(LPO_weather_data, new_date=gsub("_", "-", LPO_weather_data$date))
select(t,Barometric_Press, date, time, new_date)
head(t, n = 3)
select(t,Barometric_Press, date, time, new_date)
# confirm the results of the import
head(LPO_weather_data, n = 3)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
# confirm the results of the import
head(LPO_weather_data, n = 3)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
View(getBaromPressures)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
# confirm the results of the import
head(LPO_weather_data, n = 3)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
View(mytempfile)
# confirm the results of the import
head(LPO_weather_data, n = 3)
View(filtered)
View(LPO_weather_data)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
mytempfile <- tempfile()
readOneFile <- function(dataPath) {
read.table(dataPath,
header = TRUE,
stringsAsFactors = FALSE)
}
myProgressBar <- txtProgressBar(min = 2012, max = 2015, style = 3)
for (dataYear in 2012:2015) {
dataPath <-
paste0(
"https://raw.githubusercontent.com/lyndadotcom/LPO_weatherdata/master/Environmental_Data_Deep_Moor_",
dataYear,
".txt"
)
if (exists("LPO_weather_data")) {
mytempfile <- readOneFile(dataPath)
LPO_weather_data <- rbind(LPO_weather_data, mytempfile)
} else {
LPO_weather_data <- readOneFile(dataPath)
}
setTxtProgressBar(myProgressBar, value = dataYear)
}
# confirm the results of the import
head(LPO_weather_data, n = 3)
install.packages("tidyverse")
library(tidyverse)
qplot(data=iris)
iris
qplot(Sepal.Length, Species, dataset=iris)
iris
qplot(hp, mpg, dataset=mtcars)
qplot(hp, mpg, data=mtcars)
qplot(Sepal.Length, Species, data=iris)
co2
CO2
CO2_t<-as_tibble(CO2)
CO2_t
name<-c("Branka","Marko","Nebojsa","Luka","Rasa")
yearb<-c(1991,1990,1991,2017,1982)
eyecolor<-c("blue","brown","hazel","brown","hazel")
my_tib<-tiblle(name, yearb, eyecolor)
my_tib<-tibble(name, yearb, eyecolor)
my_tib
my_tib$eyecolor
unique(my_tib$eyecolor)
filter(my_tib, eyecolor='blue')
filter(my_tib, eyecolor=='blue')
filter(my_tib, eyecolor>1990 )
insp<-read.csv('http://594442.youcanlearnit.net/inspections.csv')
ins<-read_csv('C:\Users\Brana\Desktop\Branka\data science\inspections.csv')
ins<-read_csv("C:\Users\Brana\Desktop\Branka\data science\inspections.csv")
ins<-read_csv("inspections.csv")
getwd()
ins<-read_csv("D:/Documents/inspections.csv")
ins<-read_csv("D:/Documents/inspections.csv")
library(tidyverse)
ins<-read_csv("inspections.csv")
ins<-read_csv("inspections.csv")
library(tidyverse)
iris
install.packages("readxl")
install.packages("readxl")
library(readxl)
getwd()
library(tidyverse)
library(tidyverse)
m<-read_csv("http://594442.youcanlearnit.net/mexicanweather.csv")
m
m.long<-gather(m,m$element,m$value)
m.long<-spread(m,m$element,m$value)
m.long<-spread(m,element,value)
m.long
x<-c(1, 'branka')
class(x)
y<-c('b',2)
class(y)
library(tidyverse)
library(lubridate)
library(stringr)
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(20000))
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(2000))
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(200))
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(200), select(SITE_NAME, SITE_TYPE, SAMPLE_DATA,PARAM_TYPE, PARAMETER, RESULT, UNIT))
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(200), select("SITE_NAME", "SITE_TYPE", "SAMPLE_DATA","PARAM_TYPE", "PARAMETER", "RESULT", "UNIT"))
read.csv?
help("read_csv")
help(read_csv)
coal<-read_csv('http://594442.youcanlearnit.net/austinwater.csv', nrow(200), col_names = c("SITE_NAME", "SITE_TYPE", "SAMPLE_DATA","PARAM_TYPE", "PARAMETER", "RESULT", "UNIT"))
water<-coal
glimpse(water)
\
summary(water)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
glimpse(water)
str_detect(water$paramteretType,'PH')
WHICH(str_detect(water$paramteretType,'PH'))
wich(str_detect(water$paramteretType,'PH'))
which(str_detect(water$paramteretType,'PH'))
water[which(str_detect(water$paramteretType,'PH')),]$paramter)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'paramter'=water$PARAMETER,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
water<-coal
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'paramter'=water$PARAMETER,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
glimpse(water)
water[which(str_detect(water$paramteretType,'PH')),]$paramter)
water[which(str_detect(water$paramteretType,'PH')),]$paramter]
glimpse(water)
water<-coal
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'paramter'=water$paramter,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
glimpse(water)
water<-coal
glimpse(water)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$paramter,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$parameter,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
water<-coal
glimpse(water)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$parameter,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$PARAMETER,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
water<-coal
glimpse(water)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$PARAMETER,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
glimpse(water)
water[which(str_detect(water$paramteretType,'PH')),]$parameter
water[which(str_detect(water$paramteretType,'PH')),]
str_detect(water$paramteretType,'PH')
which(str_detect(water$paramteretType,'PH'))
water[which(str_detect(water$parameter,'PH')),]
which(str_detect(water$parameter,'PH'))
water<-coal
glimpse(water)
water<-tibble('siteName'=water$SITE_NAME,
'siteType'=water$SITE_TYPE,
'sampleType'=water$SAMPLE_DATA,
'paramteretType'=water$PARAM_TYPE,
'parameter'=water$PARAMETER,
'result'=water$PARAM_TYPE,
'unit'=water$UNIT)
glimpse(water)
unique(water$parameter)
str_detect(water$parameter,'MEDIUM')
water_fil<-subset(water, (str_detect(water$paramteretType,'ph'=TRUE)
))
water_fil<-subset(water, (str_detect(water$paramteretType,'ph')=TRUE
))
water_fil<-subset(water, (str_detect(water$paramteretType,'ph'))=TRUE)
water_fil<-subset(water, ((str_detect(water$paramteretType,'ph'))=TRUE))
x<-'Branka'
x %like% 'ra'
x %like% "%ra%"
str_detect(x, "ra")
water_fil<-subset(water, ((str_detect(water$paramteretType,'ph'))==TRUE))
glimpse(water_fil)
water_fil<-subset(water, ((str_detect(water$paramteretType,'MEDIUM'))==TRUE))
glimpse(water_fil)
glimpse(water)
water_fil<-subset(water, ((str_detect(water$parameter,'MEDIUM'))==TRUE))
glimpse(water_fil)
unique(water$parameter)
unique(water$parameter)
summary(water)
mode(water$parameter)
max(water$parameter)
water_fil<-subset(water, ((str_detect(water$parameter,'MEDIUM'))==TRUE) |  ((str_detect(water$parameter,'Water Standard'))==TRUE))
glimpse(water_fil)
water_fil$sampleType<as.factor(water$sampleType)
summary(water_fil)
water_fil$siteType<as.factor(water$siteType)
summary(water_fil)
unique(water_fil$siteType)
unique(water_fil$siteType)
glimpse(water_fil)
View(water_fil)
View(water_fil)
coal<-read_csv('http://594442.youcanlearnit.net/coal.csv')
test<-read_csv('http://594442.youcanlearnit.net/coal.csv')
View(coal)
test<-read_csv('testc.csv')
getwd()
library("tidyverse")
#### Load GDP #####
# from https://ourworldindata.org/grapher/average-real-gdp-per-capita-across-countries-and-regions?time=2016
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"), col_types = (cols(PerCapita = col_integer()) ),skip=1)
library("rstudioapi")                                 # Load rstudioapi package
setwd(dirname(getActiveDocumentContext()$path))       # Set working directory to source file location
getwd()
