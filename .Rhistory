ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE) +
geom_density(data = test_1, trim = TRUE) +
theme_ipsum()
ggplot(train_1, aes(x = pc,group=Age)) +
geom_density(trim = TRUE) +
geom_density(data = test_1, trim = TRUE) +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,adjust=1.5, alpha=0.4) +
geom_density(data = test_1, trim = TRUE,adjust=1.5, alpha=0.4) +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,adjust=05, alpha=0.4) +
geom_density(data = test_1, trim = TRUE,adjust=1.5, alpha=0.4) +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,alpha=0.4) +
geom_density(data = test_1, trim = TRUE, alpha=0.4) +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,alpha=0.4,col="red") +
geom_density(data = test_1, trim = TRUE, alpha=0.4,col="black") +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test_1, trim = TRUE,col="black") +
theme_ipsum()
library("tidyverse")
library("rio")
library(readxl)
GDP<-read.csv("GDP.csv",col.names = c("Country","Code","Year","PerCapita"))
glimpse(GDP)
g<-mutate(GDP, Year= as.integer(Year))
g<-filter(GDP, Year>1965)
g<-group_by(GDP,Country) %>%
summarize(PerCapitaMean=mean(PerCapita,na.rm = TRUE))
g
GDP_NOBEL<-inner_join(g, np, by = "Country", copy = FALSE, suffix = c(".g", ".nb"))
GDP_NOBEL<-mutate(GDP_NOBEL, Prize_NB= as.integer(Prize_NB))
Life<-read_excel("Life.xlsx", col_names = c("Country","Age"),skip=1,trim_ws = FALSE)
l<-mutate(Life, Age = as.double(Age), Country=trimws(Country, which = c("both")))
glimpse(l)
gl<-inner_join(g, l, by = "Country", copy = FALSE, suffix = c(".g", ".l"))
glimpse(gl)
ggplot(gl,aes(x = pc,
fill = Age)) +
geom_density(alpha = 0.5)
gl<-mutate(gl, pc=log(PerCapitaMean))
ggplot(gl,aes(x = pc,
fill = Age)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = pc)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = Life)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = Age)) +
geom_density(alpha = 0.5)
qqnorm(gl$Age,main="QQ plot of normal data",pch=19)
qqline(gl$Age)
qqnorm(gl$pc,main="QQ plot of normal data",pch=19)
qqline(gl$pc)
qqnorm(gl$pc,main="QQ plot of normal data",pch=19)
shapiro.test(gl$Age)
shapiro.test(gl$pc)
ggplot(gl,aes(x = Age)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = log(Age)) +
ggplot(gl,aes(x = Age) +
ggplot(gl,aes(x = Age)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = Age+100)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = Age+100)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = log(Age))) +
geom_density(alpha = 0.5)
shapiro.test(log(gl$Age))
set.seed(123)
index   <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train_1 <- gl[index, ]
test_1  <- gl[-index, ]
library(hrbrthemes)
ggplot(d,aes(x = pc)) +
geom_density(adjust=1.5, alpha=0.4) +
theme_ipsum()
ggplot(train_1, aes(x = pc,fill=Age)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test_1, trim = TRUE,col="black") +
theme_ipsum()
ggplot(train_1, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test_1, trim = TRUE,col="black") +
theme_ipsum()
b<-lm(gl$Age ~ gl$pc)
summary(b)
(test <- test_1 %>%
add_predictions(b))
install.packages("modelr")
library(modelr)
(test <- test_1 %>%
add_predictions(b))
test %>%
add_predictions(b) %>%
summarise(MSE = mean((Age - pc)^2))
test %>%
add_predictions(b) %>%
summarise(MSE = mean((Age - pc)^2))
test
(test <- test_1 %>%
add_predictions(b))
test
(test_1 <- test_1 %>%
add_predictions(b))
test_1
test_1 %>%
add_predictions(b) %>%
summarise(MSE = mean((Age - pc)^2))
test_1
test_1 %>%
add_predictions(b) %>%
summarise(MSE = mean((Age - pc)^2))
test_1
library("tidyverse")
library("readxl")
############## Load GDP ####
GDP<-read.csv("GDP.csv",col.names = c("Country","Code","Year","PerCapita"))
glimpse(GDP)
#### Load GDP #####
GDP<-read_csv("GDP.csv",col.names = c("Country","Code","Year","PerCapita"))
help("read_csv")
#### Load GDP #####
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"))
glimpse(GDP)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols_only(PerCapita = col_integer()))
glimpse(GDP)
#### Load GDP #####
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols_only(PerCapita = col_integer()),skip=1)
glimpse(GDP)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols_only(Country, Code, Year,PerCapita = col_integer()),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols_only(Country, Code, Year,PerCapita = col_integer()),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols_only(.default="c",PerCapita = col_integer()),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),col_types = (.default="c",PerCapita = col_integer()),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),col_types = (.default="c",PerCapita = "i"),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"),cols = (PerCapita = col_integer() ),skip=1)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"), col_types = (cols(PerCapita = col_integer()) ),skip=1)
glimpse(GDP)
g<-filter(GDP, Year>1965)
View(g)
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"), col_types = (cols(PerCapita = col_integer()) ),skip=1)
glimpse(GDP)
g<-filter(GDP, Year>1965)
View(g)
help("read_excel")
Life<-read_excel("Life.xlsx", col_names = c("Country","Age"),skip=1)
life<-read_excel("Life.xlsx", col_names = c("Country","Age"),skip=1)
life<-read_excel("Life.xlsx", col_names = c("Country","Age"),skip=1)
glimpse(life)
View(life)
l<-mutate(Life, Age = as.double(Age), Country=trimws(Country, which = c("both")))
glimpse(l)
help("inner_join")
gl<-inner_join(g, l, by = "Country")
glimpse(gl)
#### Load GDP #####
GDP<-read_csv("GDP.csv",col_names = c("Country","Code","Year","PerCapita"), col_types = (cols(PerCapita = col_integer()) ),skip=1)
glimpse(GDP)
ggplot(gl, aes(PerCapitaMean, Age)) +
geom_point()
g<-filter(GDP, Year>1965)
g<-group_by(g,Country) %>%
summarize(PerCapitaMean=mean(PerCapita,  na.rm = TRUE))
life<-read_excel("Life.xlsx", col_names = c("Country","Age"),skip=1)
glimpse(life)
l<-mutate(Life, Age = as.double(Age), Country=trimws(Country, which = c("both")))
glimpse(l)
gl<-inner_join(g, l, by = "Country")
glimpse(gl)
ggplot(gl, aes(PerCapitaMean, Age)) +
geom_point()
# Graph is not showing linear correlation => we will do log transformation
gl<-mutate(gl, pc=log(PerCapitaMean))
ggplot(gl, aes(pc, Age)) +
geom_point()
ggplot(gl,aes(x = pc)) +
geom_density(alpha = 0.5)
ggplot(gl,aes(x = Age)) +
geom_density(alpha = 0.5)
#normality test
qqnorm(gl$Age,main="QQ plot of normal data",pch=19)
qqline(gl$Age)
shapiro.test(log(gl$Age))
#normality test
qqnorm(gl$pc,main="QQ plot of normal data",pch=19)
qqline(gl$pc)
shapiro.test(gl$pc)
##### Splitting sample ######
set.seed(1)
i<-sample(1:nrow(gl))
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train_1 <- gl[index, ]
test_1  <- gl[-index, ]
ggplot(train_1, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
ggplot(d,aes(x = pc)) +
geom_density(adjust=1.5, alpha=0.4)
ggplot(train_1, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test_1, trim = TRUE,col="black")
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
##### Splitting sample ######
set.seed(123)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.70))
train <- gl[index, ]
test  <- gl[-index, ]
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
(test <- test %>%
add_predictions(mdl))
library(modelr)
(test <- test %>%
add_predictions(mdl))
#
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(se = FALSE, color = "red")
#compare linear line with data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare linear line with data
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
test %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
train %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
ggplot(test_1, aes(x = pred, y = Age)) +
geom_point() +
geom_abline(color = "blue")
ggplot(test, aes(x = pred, y = Age)) +
geom_point() +
geom_abline(color = "blue")
library("msm")
mdl_results <- augment(mdl, train)
ggplot(model1_results, aes(.fitted, .resid)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
mdl.res = resid(mdl)
mdl.res = resid(mdl)
plot(train$pc, mdl.res,  ylab="Residuals", xlab="Per Capita", main="test")
plot(train$pc, mdl.res,  ylab="Residuals", xlab="Per Capita", main="Residuals vs Fitted")
ggplot(train, aes(pc,mdl.res)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
plot(train$pc, mdl.res,  ylab="Residuals", xlab="Per Capita", main="Residuals vs Fitted")
ggplot(train, aes(pc,mdl.res)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
plot(train$pc, mdl.res, xlab="Per Capita", ylab="Residuals", main="Residuals vs Fitted")
ggplot(train, aes(pc,mdl.res),xlab="Per Capita", ylab="Residuals") +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
qq_plot <- qqnorm(mdl.res)
qqnorm(mdl.resc,main="QQ plot of normal data",pch=19)
qqnorm(mdl.res,main="QQ plot of normal data",pch=19)
qqline(gl$pc)
qqnorm(mdl.res,main="QQ plot of normal data",pch=19)
qqline(mdl.res)
plot(mdl)
shapiro.test(mdl.res)
shapiro.test(gl$pc)
qqnorm(mdl.res,main="QQ plot of residuals",pch=19)
qqline(mdl.res)
library("car")
install.packages("car")
library("car")
library("car")
qqPlot(mdl.res)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
ggqqplot(mdl.res)
View(GDP)
View(gl)
mdl.res
#compare linear line with data
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
train<-filter(train, age>65)
train<-filter(train, Age>65)
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
gl<-filter(gl, Age>65)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
#compare linear line with train data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
#for prediction
install.packages("modelr")
library(modelr)
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
#add column with predictions
(test <- test %>%
add_predictions(mdl))
#compare linear line with data
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
test %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
train %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
#take residuals
mdl.res = resid(mdl)
ggplot(train, aes(pc,mdl.res),xlab="Per Capita", ylab="Residuals") +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
qqnorm(mdl.res,main="QQ plot of residuals",pch=19)
qqline(mdl.res)
shapiro.test(mdl.res)
ggqqplot(mdl.res)
qqPlot(mdl.res)
View(gl)
gl<-filter(gl, Age>68)
##### Splitting sample ######
set.seed(123)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
#compare linear line with train data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
#for prediction
install.packages("modelr")
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
pc<-test_1$pc
#add column with predictions
(test <- test %>%
add_predictions(mdl))
#compare linear line with data
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
test %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
train %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
#take residuals
mdl.res = resid(mdl)
ggplot(train, aes(pc,mdl.res),xlab="Per Capita", ylab="Residuals") +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
qqnorm(mdl.res,main="QQ plot of residuals",pch=19)
qqline(mdl.res)
qqPlot(mdl.res)
shapiro.test(mdl.res)
#normality test
qqnorm(gl$pc,main="QQ plot of normal data",pch=19)
qqline(gl$pc)
shapiro.test(gl$pc)
qqnorm(mdl.res,main="QQ plot of residuals",pch=19)
# Graph is not showing linear correlation => we will do log transformation
gl<-mutate(gl, pc=log(PerCapitaMean), Age=log(Age))
ggplot(gl, aes(pc, Age)) +
geom_point()
ggplot(gl,aes(x = pc)) +
geom_density(alpha = 0.5)
#normality test
qqnorm(gl$pc,main="QQ plot of normal data",pch=19)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
#compare linear line with train data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
#add column with predictions
(test <- test %>%
add_predictions(mdl))
#compare linear line with data
ggplot(test, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
test %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
train %>%
add_predictions(mdl) %>%
summarise(MSE = mean((Age - pred)^2))
#take residuals
mdl.res = resid(mdl)
ggplot(train, aes(pc,mdl.res),xlab="Per Capita", ylab="Residuals") +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
qqnorm(mdl.res,main="QQ plot of residuals",pch=19)
qqline(mdl.res)
shapiro.test(mdl.res)
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
# Graph is not showing linear correlation => we will do log transformation
gl<-mutate(gl, pc=log(PerCapitaMean), Age)
##### Splitting sample ######
set.seed(123)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
#compare density graph for test and train data
ggplot(train, aes(x = pc)) +
geom_density(trim = TRUE,col="red") +
geom_density(data = test, trim = TRUE,col="black")
#compare linear line with train data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
gl<-inner_join(g, l, by = "Country")
# Graph is not showing linear correlation => we will do log transformation
gl<-mutate(gl, pc=log(PerCapitaMean), Age)
##### Splitting sample ######
set.seed(123)
#Chose random numbers from 1 to number of rows of gl
index <- sample(1:nrow(gl), round(nrow(gl) * 0.65))
train <- gl[index, ]
test  <- gl[-index, ]
#compare linear line with train data
ggplot(train, aes(pc, Age)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(se = FALSE, color = "red")
mdl<-lm(Age ~ pc, data=train)
summary(mdl)
